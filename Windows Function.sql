-- Windows Function:

-- 1. Rank the customers based on the total amount they've spent on rentals.

select rank() over (order by sum(amount) desc) rental_total_amount_rank,c.customer_id,concat(c.first_name,' ',c.last_name) customer_name,
sum(p.amount) rental_total_amount from customer c join payment p on c.customer_id=p.customer_id 
group by c.customer_id,c.first_name,c.last_name;

-- 2. Calculate the cumulative revenue generated by each film over time.

select film_title,payment_date,daily_revenue,sum(daily_revenue) over (partition by film_title order by payment_date) cumulative_revenue 
from (select f.title film_title,date(p.payment_date) payment_date,sum(p.amount) daily_revenue from payment p join rental r 
on p.rental_id=r.rental_id join inventory i on i.inventory_id=r.inventory_id join film f on i.film_id=f.film_id 
group by film_title,payment_date) daily_revenue_table order by film_title,payment_date;

-- 3. Determine the average rental duration for each film, considering films with similar lengths.

select title,length,rental_duration,avg(rental_duration) over (partition by length) average_rental_duration 
from film order by average_rental_duration;

-- 4. Identify the top 3 films in each category based on their rental counts.

select * from(
select c.name category_name,f.title fim_title,count(r.rental_id) rental_count,
dense_rank() over (partition by c.name order by count(r.rental_id) desc) rank_within_category 
from rental r join inventory i on r.inventory_id=i.inventory_id join film_category fc on i.film_id=fc.film_id 
join film f on fc.film_id=f.film_id join category c on fc.category_id=c.category_id group by c.name,f.title) ranked_films 
where rank_within_category<=3;

-- 5. Calculate the difference in rental counts between each customer's total rentals and the average rentals across all customers.

select customer_id,customer_name,customer_total_rental,average_customer_rental,
customer_total_rental-average_customer_rental average_and_total_rental_count_difference
from (select c.customer_id customer_id,concat(c.first_name,' ',c.last_name) customer_name,count(r.rental_id) as customer_total_rental 
from customer c join rental r on c.customer_id=r.customer_id group by c.customer_id,c.first_name,c.last_name) customer_wise_rentals,
(select avg(customer_total_rental) average_customer_rental from 
(select c.customer_id customer_id,concat(c.first_name,' ',c.last_name) customer_name,count(r.rental_id) as customer_total_rental 
from customer c join rental r on c.customer_id=r.customer_id group by c.customer_id,c.first_name,c.last_name) customer_wise_rentals) average_customer_rental;

-- 6. Find the monthly revenue trend for the entire rental store over time.

select date_format(payment_date,'%Y-%m') month,sum(amount) monthly_revenue from payment group by month; 

-- 7. Identify the customers whose total spending on rentals falls within the top 20% of all customers.

select customer_id,customer_name,total_spending from
(select c.customer_id customer_id,concat(c.first_name,' ',c.last_name) customer_name,sum(p.amount) total_spending,
percent_rank() over (order by sum(p.amount)) total_spending_rank
from customer c join payment p on c.customer_id=p.customer_id group by c.customer_id,c.first_name,c.last_name) total_spending 
where total_spending_rank>=0.80 order by total_spending desc;

-- 8. Calculate the running total of rentals per category, ordered by rental count.

select category,rental_count,sum(rental_count) over (order by rental_count desc) running_total from
(select c.name category,count(rental_id) rental_count from rental r join inventory i on r.inventory_id=i.inventory_id 
join film_category fc on i.film_id=fc.film_id join category c on fc.category_id=c.category_id group by category) category_wise_rentals;

-- 9. Find the films that have been rented less than the average rental count for their respective categories.

select f.film_id,f.title,c.name category,count(r.rental_id) rental_count,avg_table.avg_category_rentals from film f
join inventory i on f.film_id=i.film_id join rental r on i.inventory_id=r.inventory_id join film_category fc on f.film_id=fc.film_id
join category c on fc.category_id=c.category_id join (select fc.category_id,avg(film_rentals.rental_count) as avg_category_rentals
from (select f.film_id,fc.category_id,count(r.rental_id) AS rental_count from film f join inventory i on f.film_id=i.film_id
join rental r on i.inventory_id=r.inventory_id join film_category fc on f.film_id=fc.film_id group by f.film_id, fc.category_id) film_rentals
join film_category fc on film_rentals.category_id=fc.category_id group by fc.category_id) avg_table on fc.category_id=avg_table.category_id
group by f.film_id,f.title,c.name,avg_table.avg_category_rentals having count(r.rental_id)<avg_table.avg_category_rentals
order by c.name, rental_count;

-- 10. Identify the top 5 months with the highest revenue and display the revenue generated in each month.

select date_format(payment_date,'%Y-%m') month,sum(amount) monthly_revenue from payment group by month order by monthly_revenue desc 
limit 5; 